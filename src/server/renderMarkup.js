import React from 'react';
import { renderToNodeStream } from 'react-dom/server';
import createMemoryHistory from 'history/createMemoryHistory';
import send from '@polka/send-type';
import serializeJS from 'serialize-javascript';
import createStore from '@/shared/createStore';
import HotRoot from '@/shared/containers/HotRoot';
import { setCoinData } from '@/shared/actions';
import { selectLocation, selectTitle } from '@/shared/selectors';
import {
  NAVIGATE_TO_NOT_FOUND,
  ROOT_DOM_NODE_ID,
  PRELOADED_STATE_KEY,
} from '@/shared/constants';
import { getCurrentCoinData } from './services/coinData';

const assets = require(process.env.RAZZLE_ASSETS_MANIFEST);
const {
  client: { js: jsBundlePath, css: cssBundlePath },
} = assets;

const renderMarkup = async (req, res) => {
  // Ensure a nonce has been provided to us.
  // See the server/middleware/security.js for more info.
  if (typeof res.nonce !== 'string') {
    throw new Error('A "nonce" value has not been attached to the response');
  }

  const initialState = {};
  let history;
  try {
    history = createMemoryHistory({
      initialEntries: [req._parsedUrl], // generated by `parseurl` with `polka`.
    });
  } catch (_) {
    send(res, 302, '', { Location: '/' });
    return;
  }

  const store = createStore(history, initialState);
  const coinData = getCurrentCoinData();
  store.dispatch(setCoinData(coinData));
  await store.applyRouteThunk();

  const initializedState = store.getState();
  // Check if the router context contains a redirect, if so we need to set
  // the specific status and redirect header and end the response.
  const { type, kind, pathname } = selectLocation(initializedState);
  if (kind === 'redirect') {
    send(res, 302, '', { Location: pathname });
    return;
  }

  res.statusCode = type === NAVIGATE_TO_NOT_FOUND ? 404 : 200;
  res.setHeader('Content-Type', 'text/html; charset=utf-8');

  const title = selectTitle(initializedState);
  res.write(
    '<!DOCTYPE html>' +
      '<html dir="ltr" lang="en" class="h-100 mw-300 fs-20 bg-black bg-img-dark_dotted2 moon-gray">' +
      '<head>' +
      '<meta charset="utf-8">' +
      '<meta http-equiv="X-UA-Compatible" content="IE=edge">' +
      '<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0">' +
      `<title>${title}</title>` +
      `<meta rel="preconnect" href="//s2.coinmarketcap.com">` +
      `<meta rel="dns-prefetch" href="//s2.coinmarketcap.com">` +
      `<meta rel="preload" as="script" href="${jsBundlePath}">` +
      (cssBundlePath ? `<link rel="stylesheet" href="${cssBundlePath}">` : '') +
      '</head>' +
      '<body class="w-100 sans-serif">' +
      `<div id="${ROOT_DOM_NODE_ID}">`,
  );

  const rootVdomNode = <HotRoot store={store} />;
  const rootMarkupStream = renderToNodeStream(rootVdomNode);
  rootMarkupStream.pipe(
    res,
    { end: false },
  );
  rootMarkupStream.on('end', () => {
    const finalState = store.getState();
    delete finalState.location.routesMap; // So H4rd, but...
    res.end(
      '</div>' +
        `<script type="text/javascript" nonce="${res.nonce}">` +
        `window.${PRELOADED_STATE_KEY}=${serializeJS(finalState)}` +
        '</script>' +
        `<script src="${jsBundlePath}" nonce="${res.nonce}"></script>` +
        '</body>' +
        '</html>',
    );
  });
};

export default renderMarkup;
